// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String?
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tryOnRequests TryOnRequest[]
  subscription  Subscription? // Add the missing relation

  @@map("users")
}

model TryOnRequest {
  id            String   @id @default(cuid())
  predictionId  String   @unique // Fashn AI prediction ID
  
  // User info
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Input data
  modelImageUrl    String
  garmentImageUrl  String
  category         String
  
  // Processing status
  status           RequestStatus @default(PENDING)
  
  // Results
  resultImageUrl   String?
  errorMessage     String?
  
  // Metadata
  processingTime   Int?     // in seconds
  creditsUsed      Int      @default(1) // Track credits used for this request
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("try_on_requests")
}

enum RequestStatus {
  PENDING    // Just submitted to Fashn AI
  PROCESSING // Fashn AI is processing
  COMPLETED  // Successfully completed
  FAILED     // Processing failed
  EXPIRED    // Took too long to complete
}

model Subscription {
  id                       String           @id @default(cuid())
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  userId                   String           @unique
  plan                     Plan             @default(FREE)
  status                   SubStatus        @default(ACTIVE)
  dodoCustomerId           String           @unique
  currentPeriodStart       DateTime         @default(now())
  currentPeriodEnd         DateTime
  dodoSubscriptionId       String?
  tryOnRemaining           Int?             @default(20) // Fixed spacing
  tryOnPurchased           Int              @default(20)
  
  // Plan limits
  maxTryOnsPerMonth        Int              @default(20)
  hasUnlimitedTryOns       Boolean          @default(false)
  
  user                     User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([plan])
}

enum Plan {
  FREE
  BASIC
  PRO  
  PREMIUM
}

enum SubStatus {
  ACTIVE
  ACTIVE_CREDIT
  PAST_DUE
  UNPAID
  CANCELED
  TRIALING
}